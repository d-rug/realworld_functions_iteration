[["index.html", "Real-world function writing Overview", " Real-world function writing Liza Wood 2022-10-05 Overview This is a mini-lecture walking through the usefulness of function-writing and iteration using an example of reading in a large number of data files from the US Patent Office. "],["repetitive-coding-tasks.html", "Repetitive coding tasks", " Repetitive coding tasks You may often find yourself in a situation where you need to do the same thing (or set of things) in R, over and over again. This is true in my (real-world) example of working with US patent data. This (very clunky) database allows you to download all of the patents granted by week. What’s more is that the data are not so clean, and so each csv requires some cleaning be done on each of them. So if we wanted to aggregate clean patent data over multiple weeks, months, or years, we would need to run the same chunk of code (reading in and cleaning the data) over 100 times, each time with only minor alteration. This is the kind of thing that we can use function writing and iteration to our advantage. Note: How should we even be reading in and storing lots of data like this? I store my data on Box and download the Box app onto my computer so that I can find an easy filepath there. Here are the files I am working with for this example: 104 weeks of US patent data for 1977 and 1978 list.files(&quot;~/Box/d-rug/data/&quot;) ## [1] &quot;uspto_1977_1.csv&quot; &quot;uspto_1977_10.csv&quot; &quot;uspto_1977_11.csv&quot; ## [4] &quot;uspto_1977_12.csv&quot; &quot;uspto_1977_13.csv&quot; &quot;uspto_1977_14.csv&quot; ## [7] &quot;uspto_1977_15.csv&quot; &quot;uspto_1977_16.csv&quot; &quot;uspto_1977_17.csv&quot; ## [10] &quot;uspto_1977_18.csv&quot; &quot;uspto_1977_19.csv&quot; &quot;uspto_1977_2.csv&quot; ## [13] &quot;uspto_1977_20.csv&quot; &quot;uspto_1977_21.csv&quot; &quot;uspto_1977_22.csv&quot; ## [16] &quot;uspto_1977_23.csv&quot; &quot;uspto_1977_24.csv&quot; &quot;uspto_1977_25.csv&quot; ## [19] &quot;uspto_1977_26.csv&quot; &quot;uspto_1977_27.csv&quot; &quot;uspto_1977_28.csv&quot; ## [22] &quot;uspto_1977_29.csv&quot; &quot;uspto_1977_3.csv&quot; &quot;uspto_1977_30.csv&quot; ## [25] &quot;uspto_1977_31.csv&quot; &quot;uspto_1977_32.csv&quot; &quot;uspto_1977_33.csv&quot; ## [28] &quot;uspto_1977_34.csv&quot; &quot;uspto_1977_35.csv&quot; &quot;uspto_1977_36.csv&quot; ## [31] &quot;uspto_1977_37.csv&quot; &quot;uspto_1977_38.csv&quot; &quot;uspto_1977_39.csv&quot; ## [34] &quot;uspto_1977_4.csv&quot; &quot;uspto_1977_40.csv&quot; &quot;uspto_1977_41.csv&quot; ## [37] &quot;uspto_1977_42.csv&quot; &quot;uspto_1977_43.csv&quot; &quot;uspto_1977_44.csv&quot; ## [40] &quot;uspto_1977_45.csv&quot; &quot;uspto_1977_46.csv&quot; &quot;uspto_1977_47.csv&quot; ## [43] &quot;uspto_1977_48.csv&quot; &quot;uspto_1977_49.csv&quot; &quot;uspto_1977_5.csv&quot; ## [46] &quot;uspto_1977_50.csv&quot; &quot;uspto_1977_51.csv&quot; &quot;uspto_1977_52.csv&quot; ## [49] &quot;uspto_1977_6.csv&quot; &quot;uspto_1977_7.csv&quot; &quot;uspto_1977_8.csv&quot; ## [52] &quot;uspto_1977_9.csv&quot; &quot;uspto_1978_1.csv&quot; &quot;uspto_1978_10.csv&quot; ## [55] &quot;uspto_1978_11.csv&quot; &quot;uspto_1978_12.csv&quot; &quot;uspto_1978_13.csv&quot; ## [58] &quot;uspto_1978_14.csv&quot; &quot;uspto_1978_15.csv&quot; &quot;uspto_1978_16.csv&quot; ## [61] &quot;uspto_1978_17.csv&quot; &quot;uspto_1978_18.csv&quot; &quot;uspto_1978_19.csv&quot; ## [64] &quot;uspto_1978_2.csv&quot; &quot;uspto_1978_20.csv&quot; &quot;uspto_1978_21.csv&quot; ## [67] &quot;uspto_1978_22.csv&quot; &quot;uspto_1978_23.csv&quot; &quot;uspto_1978_24.csv&quot; ## [70] &quot;uspto_1978_25.csv&quot; &quot;uspto_1978_26.csv&quot; &quot;uspto_1978_27.csv&quot; ## [73] &quot;uspto_1978_28.csv&quot; &quot;uspto_1978_29.csv&quot; &quot;uspto_1978_3.csv&quot; ## [76] &quot;uspto_1978_30.csv&quot; &quot;uspto_1978_31.csv&quot; &quot;uspto_1978_32.csv&quot; ## [79] &quot;uspto_1978_33.csv&quot; &quot;uspto_1978_34.csv&quot; &quot;uspto_1978_35.csv&quot; ## [82] &quot;uspto_1978_36.csv&quot; &quot;uspto_1978_37.csv&quot; &quot;uspto_1978_38.csv&quot; ## [85] &quot;uspto_1978_39.csv&quot; &quot;uspto_1978_4.csv&quot; &quot;uspto_1978_40.csv&quot; ## [88] &quot;uspto_1978_41.csv&quot; &quot;uspto_1978_42.csv&quot; &quot;uspto_1978_43.csv&quot; ## [91] &quot;uspto_1978_44.csv&quot; &quot;uspto_1978_45.csv&quot; &quot;uspto_1978_46.csv&quot; ## [94] &quot;uspto_1978_47.csv&quot; &quot;uspto_1978_48.csv&quot; &quot;uspto_1978_49.csv&quot; ## [97] &quot;uspto_1978_5.csv&quot; &quot;uspto_1978_50.csv&quot; &quot;uspto_1978_51.csv&quot; ## [100] &quot;uspto_1978_52.csv&quot; &quot;uspto_1978_6.csv&quot; &quot;uspto_1978_7.csv&quot; ## [103] &quot;uspto_1978_8.csv&quot; &quot;uspto_1978_9.csv&quot; What would this look like if I were to go through each files one by one… # Load in that lubridate package first library(lubridate) patent77_1 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_1.csv&quot;) patent77_1$App_Date &lt;- ymd(as.character(patent77_1$App_Date)) patent77_1$Issue_Date &lt;- ymd(as.character(patent77_1$Issue_Date)) patent77_2 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_2.csv&quot;) patent77_2$App_Date &lt;- ymd(as.character(patent77_2$App_Date)) patent77_2$Issue_Date &lt;- ymd(as.character(patent77_2$Issue_Date)) patent77_3 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_3.csv&quot;) patent77_3$App_Date &lt;- ymd(as.character(patent77_3$App_Date)) patent77_3$Issue_Date &lt;- ymd(as.character(patent77_3$Issue_Date)) patent77_4 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_4.csv&quot;) patent77_4$App_Date &lt;- ymd(as.character(patent77_4$App_Date)) patent77_4$Issue_Date &lt;- ymd(as.character(patent77_4$Issue_Date)) # and so on ... Each file will look something like this: summary(patent77_1) ## WKU Title App_Date ## Length:1484 Length:1484 Min. :1960-10-18 ## Class :character Class :character 1st Qu.:1974-12-26 ## Mode :character Mode :character Median :1975-05-28 ## Mean :1975-02-22 ## 3rd Qu.:1975-09-25 ## Max. :1976-07-01 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1977-01-04 Length:1484 Length:1484 Length:1484 ## 1st Qu.:1977-01-04 Class :character Class :character Class :character ## Median :1977-01-04 Mode :character Mode :character Mode :character ## Mean :1977-01-04 ## 3rd Qu.:1977-01-04 ## Max. :1977-01-04 ## References Claims ## Length:1484 Length:1484 ## Class :character Class :character ## Mode :character Mode :character ## ## ## … Then do that 100 more times. And if you want to edit it, edit it over 100 times, and again and again until you lose your mind. So how can we make this more efficient? "],["function-writing.html", "Function writing", " Function writing Let’s first take the three lines of code that we were writing to edit one single file, and make it generalizable. Below is the one-at-a-time version. What is it that we’re actually changing each time in this repeated code below? patent77_1 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_1.csv&quot;) patent77_1$App_Date &lt;- ymd(as.character(patent77_1$App_Date)) patent77_1$Issue_Date &lt;- ymd(as.character(patent77_1$Issue_Date)) patent77_2 &lt;- read.csv(&quot;~/Box/d-rug/data/uspto_1977_2.csv&quot;) patent77_2$App_Date &lt;- ymd(as.character(patent77_2$App_Date)) patent77_2$Issue_Date &lt;- ymd(as.character(patent77_2$Issue_Date)) The filepath is the main thing that changes each time (and the name we assign to the output). But let’s focus on the filepath for now. To start writing a function, you want to give your function a name (I’ll call mine ‘process_patents’) and assign it using the function() function (trippy, I know). Inside the arguments of the function function will be the argument, the thing we want to generalize, in this case, the filepath. Let’s look at an example. I start by opening up the function with the curly brackets, pasting in the non-generalized code, and replacing the “repeated” thing with the argument. For now I have also changed the object name to df for simplicity. process_patents &lt;- function(x){ df &lt;- read.csv(x) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) } Note that we don’t need to name our argument x, we can name it whatever we want. It might be better to give it a more literal name, such as ‘filepath’. You just need to make sure you change it in the function’s arguments and inside the function text itself. process_patents &lt;- function(filepath){ df &lt;- read.csv(filepath) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) } Let’s give this a go. patent77_1 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_1.csv&quot;) summary(patent77_1) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## &quot;1977-01-04&quot; &quot;1977-01-04&quot; &quot;1977-01-04&quot; &quot;1977-01-04&quot; &quot;1977-01-04&quot; &quot;1977-01-04&quot; Our output is NOT what we would have expected. What happened? We didn’t ask the object to return the ‘df’ data frame, so it returned the last value it ran, which related to the issue date. To fix this, we just need one more line of code in the function. process_patents &lt;- function(filepath){ df &lt;- read.csv(filepath) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) return(df) } Now let’s see patent77_1 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_1.csv&quot;) summary(patent77_1) ## WKU Title App_Date ## Length:1484 Length:1484 Min. :1960-10-18 ## Class :character Class :character 1st Qu.:1974-12-26 ## Mode :character Mode :character Median :1975-05-28 ## Mean :1975-02-22 ## 3rd Qu.:1975-09-25 ## Max. :1976-07-01 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1977-01-04 Length:1484 Length:1484 Length:1484 ## 1st Qu.:1977-01-04 Class :character Class :character Class :character ## Median :1977-01-04 Mode :character Mode :character Mode :character ## Mean :1977-01-04 ## 3rd Qu.:1977-01-04 ## Max. :1977-01-04 ## References Claims ## Length:1484 Length:1484 ## Class :character Class :character ## Mode :character Mode :character ## ## ## Better. But this still only reduces our code chunk from 3 to 1, but still leaves us to paste in every file path. So now it is time to move to iteration. "],["iterating.html", "Iterating", " Iterating There are lots of ways to iterate: apply functions, map function, and for loops are among the most popular. We’re going to walk through two ways: for loops, first to discuss the logic of iteration, then the apply function, for speed and smoother coding. So, what we’re trying to do is NOT this: patent77_1 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_1.csv&quot;) patent77_2 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_2.csv&quot;) patent77_3 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_3.csv&quot;) patent77_4 &lt;- process_patents(filepath = &quot;~/Box/d-rug/data/uspto_1977_4.csv&quot;) # And so on... patents &lt;- rbind(patent77_1, patent77_2, patent77_3, patent77_4) So again, what is it here that changes every time? The filepath. This makes it an easy candidate for looping through, were each loop inputs a new filepath. The key here is understanding the use of the index, i, and how it relates to the function you want to run. In this case, we want to run through the loop 52 times, each time printing a new filepath. So here is the basic logic of the loop. for(i in list.files(&quot;~/Box/d-rug/data/&quot;, full.names = T)){ print(i) } ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_1.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_10.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_11.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_12.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_13.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_14.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_15.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_16.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_17.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_18.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_19.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_2.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_20.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_21.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_22.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_23.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_24.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_25.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_26.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_27.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_28.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_29.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_3.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_30.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_31.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_32.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_33.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_34.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_35.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_36.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_37.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_38.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_39.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_4.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_40.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_41.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_42.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_43.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_44.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_45.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_46.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_47.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_48.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_49.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_5.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_50.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_51.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_52.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_6.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_7.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_8.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1977_9.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_1.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_10.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_11.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_12.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_13.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_14.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_15.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_16.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_17.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_18.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_19.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_2.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_20.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_21.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_22.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_23.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_24.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_25.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_26.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_27.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_28.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_29.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_3.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_30.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_31.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_32.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_33.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_34.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_35.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_36.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_37.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_38.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_39.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_4.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_40.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_41.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_42.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_43.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_44.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_45.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_46.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_47.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_48.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_49.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_5.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_50.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_51.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_52.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_6.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_7.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_8.csv&quot; ## [1] &quot;/Users/lizawood/Box/d-rug/data//uspto_1978_9.csv&quot; Now that we got that, we need to understand how to incorporate that filepath into the function. Because we want to fun the process_patents() function on each filepath, and i is the value of the filepath, this is what we want to insert. Let’s give it a try for(i in list.files(&quot;~/Box/d-rug/data/&quot;, full.names = T)){ patents &lt;- process_patents(i) } summary(patents) ## WKU Title App_Date ## Length:1424 Length:1424 Min. :1957-01-04 ## Class :character Class :character 1st Qu.:1976-02-17 ## Mode :character Mode :character Median :1976-06-30 ## Mean :1976-05-13 ## 3rd Qu.:1976-10-28 ## Max. :1977-08-18 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1978-02-28 Length:1424 Length:1424 Length:1424 ## 1st Qu.:1978-02-28 Class :character Class :character Class :character ## Median :1978-02-28 Mode :character Mode :character Mode :character ## Mean :1978-02-28 ## 3rd Qu.:1978-02-28 ## Max. :1978-02-28 ## References Claims ## Length:1424 Length:1424 ## Class :character Class :character ## Mode :character Mode :character ## ## ## Something’s off here – we get an output but it is small and when we look at the issue dates we see all the last week of December. So we actually only have the last week worth of data. This is similar to what happened when we didn’t return the dataframe in the function – even though the loop runs through each week, it overwrites that output each time with the following week until the final product is only the last iteration. So one more step helps us get past this, which is to create an empty data frame outside of the loop, then rbind to that empty dataframe over each iteration (binding helps us grow that data frame, rather than overwrite it). I’m also going to measure how long this takes using the `Sys. t1 &lt;- Sys.time() patents &lt;- data.frame() for(i in list.files(&quot;~/Box/d-rug/data/&quot;, full.names = T)){ df &lt;- process_patents(i) patents &lt;- rbind(patents, df) } t2 &lt;- Sys.time() So what did we get? summary(patents) ## WKU Title App_Date ## Length:140411 Length:140411 Min. :0975-11-06 ## Class :character Class :character 1st Qu.:1975-10-20 ## Mode :character Mode :character Median :1976-05-13 ## Mean :1976-06-02 ## 3rd Qu.:1976-12-06 ## Max. :9176-06-01 ## NA&#39;s :2 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1974-01-25 Length:140411 Length:140411 Length:140411 ## 1st Qu.:1977-07-05 Class :character Class :character Class :character ## Median :1978-01-03 Mode :character Mode :character Mode :character ## Mean :1978-01-19 ## 3rd Qu.:1978-07-11 ## Max. :9177-06-21 ## NA&#39;s :1 ## References Claims ## Length:140411 Length:140411 ## Class :character Class :character ## Mode :character Mode :character ## ## ## ## That’s more like it! But how long did it take? t2 - t1 ## Time difference of 14.26673 secs For loops can be slow, so let’s now switch this iteration to the apply approach. t1 &lt;- Sys.time() patents &lt;- lapply(list.files(&quot;~/Box/d-rug/data/&quot;, full.names = T), process_patents) ## Warning: 1 failed to parse. ## Warning: 1 failed to parse. ## Warning: 1 failed to parse. patent_df &lt;- do.call(&quot;rbind&quot;, patents) t2 &lt;- Sys.time() We get the same output: summary(patent_df) ## WKU Title App_Date ## Length:140411 Length:140411 Min. :0975-11-06 ## Class :character Class :character 1st Qu.:1975-10-20 ## Mode :character Mode :character Median :1976-05-13 ## Mean :1976-06-02 ## 3rd Qu.:1976-12-06 ## Max. :9176-06-01 ## NA&#39;s :2 ## Issue_Date Inventor Assignee ICL_Class ## Min. :1974-01-25 Length:140411 Length:140411 Length:140411 ## 1st Qu.:1977-07-05 Class :character Class :character Class :character ## Median :1978-01-03 Mode :character Mode :character Mode :character ## Mean :1978-01-19 ## 3rd Qu.:1978-07-11 ## Max. :9177-06-21 ## NA&#39;s :1 ## References Claims ## Length:140411 Length:140411 ## Class :character Class :character ## Mode :character Mode :character ## ## ## ## And how long did it take? Right now this seems like a marginal gain, but over time loops gets slower and slower, whereas apply functions do not, so consider this when choosing. t2 - t1 ## Time difference of 8.232988 secs "],["putting-it-together.html", "Putting it together", " Putting it together We’ve made a function, and iterated through that function. So let’s go one step further and make a function with the iteration built in: read_patents &lt;- function(file_dir){ patents &lt;- do.call(&quot;rbind&quot;, lapply(list.files(file_dir, full.names = T), function(x){ df &lt;- read.csv(x) df$App_Date &lt;- ymd(as.character(df$App_Date)) df$Issue_Date &lt;- ymd(as.character(df$Issue_Date)) return(df) })) return(patents) } Now all we have to do is use this singular function with the director of all files to read in and combine the patents: patents &lt;- read_patents(&quot;~/Box/d-rug/data/&quot;) ## Warning: 1 failed to parse. ## Warning: 1 failed to parse. ## Warning: 1 failed to parse. head(patents) ## WKU Title App_Date Issue_Date ## 1 D02428814 Diver s helmet 1975-09-08 1977-01-04 ## 2 D02428822 Combined brush and ice scraper 1976-04-21 1977-01-04 ## 3 D02428830 Toothbrush 1975-09-17 1977-01-04 ## 4 D02428849 Stand for potted plants 1976-01-07 1977-01-04 ## 5 D02428857 Chair 1975-08-18 1977-01-04 ## 6 D02428865 Seat or similar article 1975-06-02 1977-01-04 ## Inventor Assignee ICL_Class ## 1 Richard F. Jones General Aquadyne, Inc. D0203 ## 2 Otto W. Schneider Erwin Weller Company D0401;D0705 ## 3 Thomas J. De Marco D0402;D2402 ## 4 Peter Diaz Lawrence Peska Associates, Inc. D0604 ## 5 Lee Harold Fister, Jr. D0601 ## 6 Taylor M. Potter D0601 ## References ## 1 3845768;3943571 ## 2 D184943;D228585;2856621;2981964;3017649 ## 3 D56858;1209789;2677843;3677264 ## 4 D137106;D165328;1406893 ## 5 ## 6 D49656;D219583;D227834;D234171;D237923;3563599 ## Claims ## 1 The ornamental design for a diver s helmet, as shown. ## 2 The ornamental design for a combined brush and ice scraper, or the like,substantially as shown and described. ## 3 The ornamental design for a toothbrush, substantially as shown anddescribed. ## 4 The ornamental design for a stand for potted plants, substantially asshown. ## 5 The ornamental design for a chair, as shown. ## 6 The ornamental design for a seat or similar article, as shown. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
